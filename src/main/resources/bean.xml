<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 把对象的创建交给spring来管理 -->
    <bean id="accountService" class="fun.youzz.service.impl.AccountServiceImpl"></bean>

    <!-- spring中基于xml的aop配置
            1. 把通知bean也交给spring管理
            2. 使用aop:config标签表明开始aop配置
            3. 使用aop：aspect标签表明配置切面
                id属性：切面唯一标志
                ref属性：指定通知类bean的id
            4. 在aop:aspect标签内部使用对应的标签配置通知的类型
                aop:before: 表示配置前置通知
                    method属性：指定Logger类中哪个方法为前置通知
                    pointcut属性：指定切入点表达式，该表达式是指对业务层的哪些方法增强
                切入点表达式：
                    关键字：execution(表达式)
                    表达式：
                        访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                    标准表达式：
                        public void fun.youzz.service.impl.AccountServiceImpl.saveAccount()
                    全通配写法：
                        * *..*.*(..)

                    实际开发中通常：
                        * fun.youzz.service.impl.*.*(..)

            5.
     -->

    <bean id="logger" class="fun.youzz.utils.Logger"></bean>

    <!-- 配置aop -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置前置通知 -->
            <aop:before method="beforePrintLog" pointcut="execution(* fun.youzz.service.impl.*.*(..))"></aop:before>
            <!-- 配置后置通知 -->
            <aop:after-returning method="afterReturningPrintLog" pointcut="execution(* fun.youzz.service.impl.*.*(..))"></aop:after-returning>
            <!-- 配置异常通知 -->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(* fun.youzz.service.impl.*.*(..))"></aop:after-throwing>
            <!-- 配置最终通知 -->
            <aop:after method="afterPrintLog" pointcut="execution(* fun.youzz.service.impl.*.*(..))"></aop:after>
        </aop:aspect>

    </aop:config>


</beans>